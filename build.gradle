plugins {
    id 'org.springframework.boot' version '2.2.4.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id "org.sonarqube" version "2.7"
}
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: 'project-report'

group = 'com.poc.spring.docker'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}
configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}
ext {
    set('springCloudVersion', "Hoxton.SR1")
    set('snippetsDir', file("build/generated-snippets"))
    set("springBootGroupDependenciesVersion", "2.1.6.RELEASE")
    set('swaggerVersion', "2.9.2")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compile group: 'org.springframework.boot', name: 'spring-boot-configuration-processor', version: "${springBootGroupDependenciesVersion}"
    implementation "io.springfox:springfox-swagger2:$swaggerVersion"
    implementation "io.springfox:springfox-swagger-ui:$swaggerVersion"
    implementation 'org.flywaydb:flyway-core'
    compile 'commons-discovery:commons-discovery:0.5'
    implementation 'org.springframework.cloud:spring-cloud-stream'
    compile 'org.springframework.cloud:spring-cloud-starter-stream-kafka'
    implementation 'org.springframework.cloud:spring-cloud-stream-binder-kafka-streams'
    compileOnly 'org.projectlombok:lombok'
    compile 'org.postgresql:postgresql'
    compile group: 'org.python', name: 'jython', version: '2.7-b1'
    annotationProcessor 'org.projectlombok:lombok'
    compile("org.springframework.boot:spring-boot-starter-web-services")
    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-xml', version: '2.9.9'
    compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.9.9'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.10.2'
    compile 'javax.activation:activation:1.1.1'
    compile group: 'javax.validation', name: 'validation-api', version: '2.0.0.Final'
    compile group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '6.2'
    compile group: 'ch.qos.logback', name: 'logback-core', version: '1.3.0-alpha4'
    compile group: 'org.modelmapper', name: 'modelmapper', version: '2.3.5'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'
    compile group: 'com.vladmihalcea', name: 'hibernate-types-52', version: '2.9.3'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.cloud:spring-cloud-stream-test-support'

    integrationTestImplementation('org.springframework.boot:spring-boot-starter-data-jpa')
    integrationTestImplementation('org.springframework.boot:spring-boot-starter-web')
    integrationTestRuntime('org.postgresql:postgresql')
    integrationTestImplementation('org.springframework.boot:spring-boot-starter-test')
    integrationTestImplementation('org.liquibase:liquibase-core')
    integrationTestCompile 'org.testcontainers:postgresql:1.10.1'
    integrationTestCompile('org.hibernate:hibernate-core:5.4.2.Final')

}
dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}


test {
    useJUnitPlatform()
}
task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}


jacoco {
    toolVersion = "0.8.3"
    reportsDir = file("$buildDir/customJacocoReportDir")
}
jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}
task buildWithSonarQube {
    dependsOn 'build'
    dependsOn 'sonarqube'

}